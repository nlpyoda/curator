{"version":3,"file":"static/js/508.f47c8ece.chunk.js","mappings":"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","sources":["app/services/SupabaseService.js"],"sourcesContent":["// Supabase service for cloud database integration\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://uubjjjxzywpyxiqcxnfn.supabase.co';\n\nexport class SupabaseService {\n  constructor() {\n    this.supabase = null;\n    this.initialized = false;\n  }\n\n  async initialize() {\n    try {\n      // Get Supabase key from environment variables\n      // For testing, let's use the key directly first\n      const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_KEY || \n                         process.env.SUPABASE_KEY || \n                         'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV1Ympqanh6eXdweXhpcWN4bmZuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg2NTIwODQsImV4cCI6MjA2NDIyODA4NH0.ba0c3uKsmhs9BosnuqLJFUYyjDYZQGxNDZE-qWA5v-4';\n      \n      if (!supabaseKey) {\n        throw new Error('Supabase key not found in environment variables');\n      }\n\n      this.supabase = createClient(supabaseUrl, supabaseKey);\n      \n      // Test connection with a simple query - check if Product table exists\n      try {\n        const { data, error } = await this.supabase\n          .from('Product')\n          .select('*')\n          .limit(1);\n        \n        if (error) {\n          // If table doesn't exist, that's expected - we'll handle it gracefully\n          if (error.message.includes('relation \"Product\" does not exist')) {\n            console.log('üìã Product table does not exist in Supabase yet');\n            throw new Error('Product table does not exist. Please create the table first.');\n          }\n          throw error;\n        }\n      } catch (tableError) {\n        throw tableError;\n      }\n      \n      this.initialized = true;\n      console.log('‚úÖ Supabase service initialized successfully');\n      return true;\n      \n    } catch (error) {\n      console.log('‚ùå Supabase initialization failed:', error.message);\n      this.initialized = false;\n      return false;\n    }\n  }\n\n  async searchProducts(query, persona = null, limit = 10) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const normalizedQuery = query.toLowerCase().trim();\n      \n      // Search products using Supabase query\n      let queryBuilder = this.supabase\n        .from('Product')\n        .select('*')\n        .or(`title.ilike.%${normalizedQuery}%,description.ilike.%${normalizedQuery}%,features.ilike.%${normalizedQuery}%`)\n        .limit(limit);\n\n      const { data: products, error } = await queryBuilder;\n      \n      if (error) {\n        throw error;\n      }\n\n      // Transform to expected format and apply persona scoring\n      const transformedProducts = products.map(product => {\n        // Convert Supabase format to expected format\n        const transformed = {\n          id: product.id,\n          title: product.title,\n          price: product.price,\n          link: product.link,\n          description: product.description,\n          features: product.features,\n          whyBuy: product.whyBuy,\n          image: product.image || '', // Add image support\n          reviews: {\n            amazon: product.amazonReviewSummary || '',\n            instagram: product.instagramReviewSummary || '',\n            marketplace: product.fbMarketplaceSummary || ''\n          },\n          prosAndCons: product.prosAndCons || { pros: [], cons: [] },\n          lastUpdated: product.lastUpdated ? new Date(product.lastUpdated).toISOString().split('T')[0] : '',\n          source: product.source\n        };\n\n        // Apply persona scoring\n        let similarity = 0.5; // Base score\n        \n        if (persona) {\n          const personaLower = persona.toLowerCase();\n          \n          if (personaLower.includes('tech') && \n            (product.title.toLowerCase().includes('headphones') || \n              product.title.toLowerCase().includes('smart') ||\n              product.title.toLowerCase().includes('macbook'))) {\n            similarity += 0.3;\n          }\n          \n          if (personaLower.includes('professional') && \n            (product.description.toLowerCase().includes('professional') || \n              product.description.toLowerCase().includes('work'))) {\n            similarity += 0.2;\n          }\n          \n          if (personaLower.includes('quality') && \n            (product.prosAndCons?.pros?.some(pro => pro.toLowerCase().includes('quality')))) {\n            similarity += 0.2;\n          }\n        }\n        \n        return {\n          ...transformed,\n          similarity: Math.min(similarity, 0.97)\n        };\n      });\n\n      // Sort by similarity\n      transformedProducts.sort((a, b) => b.similarity - a.similarity);\n      \n      console.log(`Found ${transformedProducts.length} products from Supabase`);\n      return transformedProducts;\n      \n    } catch (error) {\n      console.error('Supabase search error:', error);\n      throw error;\n    }\n  }\n\n  async getAllProducts(limit = 50) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data: products, error } = await this.supabase\n        .from('Product')\n        .select('*')\n        .limit(limit);\n      \n      if (error) {\n        throw error;\n      }\n\n      return products.map(product => ({\n        id: product.id,\n        title: product.title,\n        price: product.price,\n        link: product.link,\n        description: product.description,\n        features: product.features,\n        whyBuy: product.whyBuy,\n        image: product.image || '', // Add image support\n        reviews: {\n          amazon: product.amazonReviewSummary || '',\n          instagram: product.instagramReviewSummary || '',\n          marketplace: product.fbMarketplaceSummary || ''\n        },\n        prosAndCons: product.prosAndCons || { pros: [], cons: [] },\n        lastUpdated: product.lastUpdated ? new Date(product.lastUpdated).toISOString().split('T')[0] : '',\n        source: product.source\n      }));\n      \n    } catch (error) {\n      console.error('Error fetching all products:', error);\n      throw error;\n    }\n  }\n\n  async addProduct(productData) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('Product')\n        .insert([{\n          title: productData.title,\n          price: productData.price,\n          link: productData.link,\n          source: productData.source,\n          description: productData.description,\n          features: productData.features,\n          whyBuy: productData.whyBuy,\n          amazonReviewSummary: productData.reviews?.amazon || '',\n          instagramReviewSummary: productData.reviews?.instagram || '',\n          fbMarketplaceSummary: productData.reviews?.marketplace || '',\n          prosAndCons: productData.prosAndCons,\n          category: productData.category,\n          subCategory: productData.subCategory,\n          tags: productData.tags || [],\n          attributes: productData.attributes || {}\n        }])\n        .select();\n      \n      if (error) {\n        throw error;\n      }\n      \n      console.log('Product added to Supabase:', data[0]?.title);\n      return data[0];\n      \n    } catch (error) {\n      console.error('Error adding product to Supabase:', error);\n      throw error;\n    }\n  }\n\n  async getProductCount() {\n    if (!this.initialized) {\n      return 0;\n    }\n\n    try {\n      const { count, error } = await this.supabase\n        .from('Product')\n        .select('*', { count: 'exact', head: true });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return count || 0;\n    } catch (error) {\n      console.error('Error getting product count:', error);\n      return 0;\n    }\n  }\n\n  async updateProduct(productId, updates) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('Product')\n        .update(updates)\n        .eq('id', productId)\n        .select();\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data[0];\n      \n    } catch (error) {\n      console.error('Error updating product in Supabase:', error);\n      throw error;\n    }\n  }\n\n  async searchProductsByImageSimilarity(queryEmbedding, threshold = 0.7, limit = 10) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .rpc('search_products_by_image_similarity', {\n          query_embedding: queryEmbedding,\n          match_threshold: threshold,\n          match_count: limit\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      return data.map(product => ({\n        ...product,\n        similarity: product.similarity || 0\n      }));\n    } catch (error) {\n      console.error('Error in image similarity search:', error);\n      throw error;\n    }\n  }\n\n  async searchProductsMultimodal(textQuery = '', imageEmbedding = null, options = {}) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    const {\n      textWeight = 0.6,\n      imageWeight = 0.4,\n      limit = 10\n    } = options;\n\n    try {\n      const { data, error } = await this.supabase\n        .rpc('search_products_multimodal', {\n          text_query: textQuery,\n          image_embedding: imageEmbedding,\n          text_weight: textWeight,\n          image_weight: imageWeight,\n          match_count: limit\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      return data.map(product => ({\n        id: product.id,\n        title: product.title,\n        price: product.price,\n        link: product.link,\n        image: product.image || '',\n        description: product.description,\n        similarity: product.combined_score || 0,\n        source: 'Supabase'\n      }));\n    } catch (error) {\n      console.error('Error in multimodal search:', error);\n      // Fallback to regular text search\n      if (textQuery) {\n        return await this.searchProducts(textQuery, null, limit);\n      }\n      throw error;\n    }\n  }\n\n  async updateProductEmbedding(productId, embedding, metadata = {}) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const updateData = {\n        image_embedding: embedding,\n        embedding_model: metadata.model || 'clip-vit-base-patch32',\n        embedding_created_at: new Date().toISOString()\n      };\n\n      const { data, error } = await this.supabase\n        .from('Product')\n        .update(updateData)\n        .eq('id', productId)\n        .select();\n\n      if (error) {\n        throw error;\n      }\n\n      return data[0];\n    } catch (error) {\n      console.error('Error updating product embedding:', error);\n      throw error;\n    }\n  }\n\n  async getProductsWithoutEmbeddings(limit = 50) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('Product')\n        .select('id, title, description, image')\n        .is('image_embedding', null)\n        .not('image', 'is', null)\n        .limit(limit);\n\n      if (error) {\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error fetching products without embeddings:', error);\n      throw error;\n    }\n  }\n\n  async getBrandPersonas() {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('brand_personas')\n        .select('*')\n        .order('brand_name');\n\n      if (error) {\n        throw error;\n      }\n\n      // Transform to the expected format\n      const brandPersonas = {};\n      data.forEach(row => {\n        brandPersonas[row.brand_name] = {\n          persona: row.persona,\n          description: row.description,\n          keywords: row.keywords,\n          values: row.values,\n          demographics: row.demographics\n        };\n      });\n\n      return brandPersonas;\n    } catch (error) {\n      console.error('Error fetching brand personas:', error);\n      throw error;\n    }\n  }\n\n  async addBrandPersona(brandPersonaData) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('brand_personas')\n        .upsert({\n          brand_name: brandPersonaData.brandName,\n          persona: brandPersonaData.persona,\n          description: brandPersonaData.description,\n          keywords: brandPersonaData.keywords,\n          values: brandPersonaData.values,\n          demographics: brandPersonaData.demographics\n        }, {\n          onConflict: 'brand_name'\n        })\n        .select();\n\n      if (error) {\n        throw error;\n      }\n\n      console.log('Brand persona added to Supabase:', data[0]?.brand_name);\n      return data[0];\n    } catch (error) {\n      console.error('Error adding brand persona to Supabase:', error);\n      throw error;\n    }\n  }\n\n  async deleteProduct(productId) {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('Product')\n        .delete()\n        .eq('id', productId)\n        .select();\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data[0];\n      \n    } catch (error) {\n      console.error('Error deleting product from Supabase:', error);\n      throw error;\n    }\n  }\n\n  async deleteAllProducts() {\n    if (!this.initialized) {\n      throw new Error('Supabase service not initialized');\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('Product')\n        .delete()\n        .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all products\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n      \n    } catch (error) {\n      console.error('Error deleting all products from Supabase:', error);\n      throw error;\n    }\n  }\n\n  async cleanup() {\n    // Supabase client doesn't need explicit cleanup\n    this.initialized = false;\n  }\n}"],"names":["SupabaseService","constructor","this","supabase","initialized","initialize","supabaseKey","process","EXPO_PUBLIC_SUPABASE_KEY","SUPABASE_KEY","Error","createClient","data","error","from","select","limit","message","includes","console","log","tableError","searchProducts","query","persona","normalizedQuery","toLowerCase","trim","queryBuilder","or","products","transformedProducts","map","product","transformed","id","title","price","link","description","features","whyBuy","image","reviews","amazon","amazonReviewSummary","instagram","instagramReviewSummary","marketplace","fbMarketplaceSummary","prosAndCons","pros","cons","lastUpdated","Date","toISOString","split","source","similarity","personaLower","some","pro","Object","assign","Math","min","sort","a","b","length","getAllProducts","addProduct","productData","insert","category","subCategory","tags","attributes","getProductCount","count","head","updateProduct","productId","updates","update","eq","searchProductsByImageSimilarity","queryEmbedding","threshold","rpc","query_embedding","match_threshold","match_count","searchProductsMultimodal","textQuery","imageEmbedding","options","textWeight","imageWeight","text_query","image_embedding","text_weight","image_weight","combined_score","updateProductEmbedding","embedding","metadata","updateData","embedding_model","model","embedding_created_at","getProductsWithoutEmbeddings","is","not","getBrandPersonas","order","brandPersonas","forEach","row","brand_name","keywords","values","demographics","addBrandPersona","brandPersonaData","upsert","brandName","onConflict","deleteProduct","delete","deleteAllProducts","neq","cleanup"],"sourceRoot":""}